-- Universal Tool/Item Scanner & Exploiter for Roblox Executors
-- Scans for all tools, weapons, and items then exploits vulnerabilities to obtain them

-- Script reload system
if _G.ToolExploiterScript then
    _G.ToolExploiterScript:Cleanup()
    print("üîÑ Reloading Tool Exploiter script...")
else
    print("üîß Loading Universal Tool Exploiter...")
end

_G.ExploiterEnabled = true
_G.ScanKey = Enum.KeyCode.T -- Press T to open tool exploiter
_G.QuickGrabKey = Enum.KeyCode.G -- Press G for quick grab nearest tool

local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')
local TweenService = game:GetService('TweenService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Workspace = game:GetService('Workspace')
local StarterPack = game:GetService('StarterPack')
local LocalPlayer = Players.LocalPlayer

-- Variables
local connections = {}
local scriptData = {}
local foundTools = {}
local foundItems = {}
local scanResults = {}
local selectedTool = nil
local guiVisible = false
local autoScanEnabled = true
local exploitMethods = {}

-- Exploitation methods
local function initializeExploitMethods()
    exploitMethods = {
        -- Method 1: Direct Clone to Backpack
        directClone = function(tool)
            local success = pcall(function()
                if tool and tool.Parent then
                    local cloned = tool:Clone()
                    cloned.Parent = LocalPlayer.Backpack
                    return true
                end
            end)
            return success
        end,
        
        -- Method 2: Clone to Character
        cloneToCharacter = function(tool)
            local success = pcall(function()
                if tool and LocalPlayer.Character then
                    local cloned = tool:Clone()
                    cloned.Parent = LocalPlayer.Character
                    return true
                end
            end)
            return success
        end,
        
        -- Method 3: Remote Event Exploitation
        remoteExploit = function(tool)
            local success = false
            pcall(function()
                -- Scan for common tool-giving RemoteEvents
                local function scanForRemotes(parent)
                    for _, obj in pairs(parent:GetDescendants()) do
                        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                            local name = obj.Name:lower()
                            if name:find("give") or name:find("equip") or name:find("tool") or 
                               name:find("item") or name:find("weapon") or name:find("purchase") then
                                
                                -- Try different argument patterns
                                local attempts = {
                                    {tool.Name},
                                    {tool},
                                    {tool.Name, LocalPlayer},
                                    {LocalPlayer, tool.Name},
                                    {"give", tool.Name},
                                    {"equip", tool.Name},
                                    {tool.Name, 1}, -- quantity
                                    {tool.Name, true}, -- boolean flag
                                }
                                
                                for _, args in pairs(attempts) do
                                    pcall(function()
                                        if obj:IsA("RemoteEvent") then
                                            obj:FireServer(unpack(args))
                                        else
                                            obj:InvokeServer(unpack(args))
                                        end
                                        success = true
                                    end)
                                end
                            end
                        end
                    end
                end
                
                scanForRemotes(ReplicatedStorage)
                scanForRemotes(Workspace)
            end)
            return success
        end,
        
        -- Method 4: StarterPack Injection
        starterPackInject = function(tool)
            local success = pcall(function()
                if tool then
                    local cloned = tool:Clone()
                    cloned.Parent = StarterPack
                    -- Also add to current backpack
                    local cloned2 = tool:Clone()
                    cloned2.Parent = LocalPlayer.Backpack
                    return true
                end
            end)
            return success
        end,
        
        -- Method 5: Workspace Drop Exploit
        dropExploit = function(tool)
            local success = pcall(function()
                if tool and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local cloned = tool:Clone()
                    local rootPart = LocalPlayer.Character.HumanoidRootPart
                    
                    -- Position tool near player
                    if cloned:FindFirstChild("Handle") then
                        cloned.Handle.CFrame = rootPart.CFrame + Vector3.new(0, 2, 2)
                        cloned.Handle.Anchored = false
                        cloned.Parent = Workspace
                        
                        -- Wait a bit then try to pick it up
                        wait(0.1)
                        if LocalPlayer.Character:FindFirstChild("Humanoid") then
                            LocalPlayer.Character.Humanoid:EquipTool(cloned)
                        end
                    end
                    return true
                end
            end)
            return success
        end,
        
        -- Method 6: Advanced Handle Manipulation
        handleManipulation = function(tool)
            local success = pcall(function()
                if tool and tool:FindFirstChild("Handle") then
                    local cloned = tool:Clone()
                    
                    -- Try to manipulate tool properties
                    cloned.CanBeDropped = false
                    cloned.RequiresHandle = false
                    
                    if cloned:FindFirstChild("Handle") then
                        cloned.Handle.CanCollide = false
                        cloned.Handle.Anchored = true
                    end
                    
                    cloned.Parent = LocalPlayer.Backpack
                    return true
                end
            end)
            return success
        end,
        
        -- Method 7: Network Event Scanning
        networkScan = function(tool)
            local success = false
            pcall(function()
                -- Look for inventory-related network events
                for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
                    if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                        local name = obj.Name:lower()
                        if name:find("inventory") or name:find("backpack") or name:find("add") then
                            local patterns = {
                                {tool.Name, "add"},
                                {"add", tool.Name},
                                {LocalPlayer.UserId, tool.Name},
                                {tool.Name, LocalPlayer}
                            }
                            
                            for _, pattern in pairs(patterns) do
                                pcall(function()
                                    if obj:IsA("RemoteEvent") then
                                        obj:FireServer(unpack(pattern))
                                    else
                                        obj:InvokeServer(unpack(pattern))
                                    end
                                    success = true
                                end)
                            end
                        end
                    end
                end
            end)
            return success
        end,
        
        -- Method 8: Asset Manipulation
        assetManipulation = function(tool)
            local success = pcall(function()
                local cloned = tool:Clone()
                
                -- Remove problematic properties
                pcall(function() cloned.CanBeDropped = true end)
                pcall(function() cloned.RequiresHandle = false end)
                
                -- Try to modify tool attributes to make it ours
                pcall(function()
                    cloned:SetAttribute("Owner", LocalPlayer.Name)
                    cloned:SetAttribute("UserId", LocalPlayer.UserId)
                end)
                
                -- Remove ownership-related scripts
                for _, script in pairs(cloned:GetDescendants()) do
                    if script:IsA("Script") and script.Name:lower():find("owner") then
                        script:Destroy()
                    end
                end
                
                cloned.Parent = LocalPlayer.Backpack
                return true
            end)
            return success
        end
    }
end

-- Advanced tool scanner
local function scanForTools()
    foundTools = {}
    foundItems = {}
    scanResults = {}
    
    local scannedObjects = 0
    local totalObjects = 0
    
    print("üîç Starting comprehensive tool scan...")
    
    -- Scan function
    local function scanContainer(container, containerName)
        local containerResults = {
            name = containerName,
            tools = {},
            items = {},
            vulnerabilities = {}
        }
        
        pcall(function()
            for _, obj in pairs(container:GetDescendants()) do
                totalObjects = totalObjects + 1
                
                if obj:IsA("Tool") or obj:IsA("HopperBin") then
                    local toolInfo = {
                        object = obj,
                        name = obj.Name,
                        location = containerName,
                        fullPath = obj:GetFullName(),
                        hasHandle = obj:FindFirstChild("Handle") ~= nil,
                        hasScript = false,
                        canBeCloned = true,
                        vulnerabilities = {}
                    }
                    
                    -- Check for scripts
                    for _, child in pairs(obj:GetDescendants()) do
                        if child:IsA("Script") or child:IsA("LocalScript") or child:IsA("ModuleScript") then
                            toolInfo.hasScript = true
                            break
                        end
                    end
                    
                    -- Check vulnerabilities
                    local vulns = {}
                    
                    -- Vulnerability 1: No CanBeDropped property or it's true
                    if not obj:FindFirstChild("CanBeDropped") or obj.CanBeDropped ~= false then
                        table.insert(vulns, "Droppable")
                    end
                    
                    -- Vulnerability 2: No RequiresHandle or it's false
                    if not obj.RequiresHandle then
                        table.insert(vulns, "No Handle Required")
                    end
                    
                    -- Vulnerability 3: Tool is in Workspace (can be picked up)
                    if obj:IsDescendantOf(Workspace) then
                        table.insert(vulns, "World Pickup")
                    end
                    
                    -- Vulnerability 4: Tool is clonable
                    local cloneTest = pcall(function() 
                        local test = obj:Clone()
                        test:Destroy()
                    end)
                    if cloneTest then
                        table.insert(vulns, "Clonable")
                    end
                    
                    -- Vulnerability 5: No ownership protection
                    if not obj:GetAttribute("Owner") and not obj:FindFirstChild("Owner") then
                        table.insert(vulns, "No Owner Protection")
                    end
                    
                    toolInfo.vulnerabilities = vulns
                    table.insert(containerResults.tools, toolInfo)
                    table.insert(foundTools, toolInfo)
                    
                elseif obj:IsA("Accessory") or obj:IsA("Hat") or 
                       (obj:IsA("Model") and (obj.Name:lower():find("weapon") or obj.Name:lower():find("gun") or 
                        obj.Name:lower():find("sword") or obj.Name:lower():find("item"))) then
                    
                    local itemInfo = {
                        object = obj,
                        name = obj.Name,
                        location = containerName,
                        fullPath = obj:GetFullName(),
                        type = obj.ClassName,
                        canBeCloned = true
                    }
                    
                    table.insert(containerResults.items, itemInfo)
                    table.insert(foundItems, itemInfo)
                end
                
                scannedObjects = scannedObjects + 1
            end
        end)
        
        return containerResults
    end
    
    -- Scan all major containers
    local containers = {
        {Workspace, "Workspace"},
        {ReplicatedStorage, "ReplicatedStorage"}, 
        {StarterPack, "StarterPack"}
    }
    
    -- Scan each player's character and backpack
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            table.insert(containers, {player.Character, player.Name .. "'s Character"})
        end
        if player.Backpack then
            table.insert(containers, {player.Backpack, player.Name .. "'s Backpack"})
        end
    end
    
    for _, container in pairs(containers) do
        local results = scanContainer(container[1], container[2])
        table.insert(scanResults, results)
    end
    
    print("‚úÖ Scan complete!")
    print("üìä Scanned " .. scannedObjects .. " objects")
    print("üîß Found " .. #foundTools .. " tools")
    print("üì¶ Found " .. #foundItems .. " items")
    
    return scanResults
end

-- Exploit tool using all available methods
local function exploitTool(toolInfo)
    if not toolInfo or not toolInfo.object then
        print("‚ùå Invalid tool info")
        return false
    end
    
    local tool = toolInfo.object
    local successCount = 0
    local totalMethods = 0
    
    print("üéØ Exploiting tool: " .. tool.Name)
    print("üìç Location: " .. toolInfo.location)
    print("üîì Vulnerabilities: " .. table.concat(toolInfo.vulnerabilities, ", "))
    
    -- Try all exploitation methods
    for methodName, method in pairs(exploitMethods) do
        totalMethods = totalMethods + 1
        local success = method(tool)
        if success then
            successCount = successCount + 1
            print("‚úÖ " .. methodName .. " - SUCCESS")
        else
            print("‚ùå " .. methodName .. " - FAILED")
        end
        wait(0.1) -- Small delay between methods
    end
    
    -- Special vulnerability-based exploits
    for _, vuln in pairs(toolInfo.vulnerabilities) do
        if vuln == "World Pickup" and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            -- Try to walk to tool and pick it up
            pcall(function()
                if tool:FindFirstChild("Handle") then
                    LocalPlayer.Character.Humanoid:MoveTo(tool.Handle.Position)
                    wait(1)
                    LocalPlayer.Character.Humanoid:EquipTool(tool)
                    successCount = successCount + 1
                    print("‚úÖ World Pickup - SUCCESS")
                end
            end)
        end
        
        if vuln == "Clonable" then
            -- Additional clone attempts with different methods
            pcall(function()
                local cloned = tool:Clone()
                -- Try putting in different locations
                local locations = {LocalPlayer.Backpack, LocalPlayer.Character, StarterPack}
                for _, loc in pairs(locations) do
                    pcall(function()
                        cloned:Clone().Parent = loc
                    end)
                end
                successCount = successCount + 1
            end)
        end
    end
    
    print("üìà Exploitation complete: " .. successCount .. " successful methods")
    return successCount > 0
end

-- Update tool list in GUI
local function updateToolList()
    if not scriptData.scrollFrame then return end
    
    -- Clear existing items
    for _, child in pairs(scriptData.scrollFrame:GetChildren()) do
        if child:IsA("Frame") then
            child:Destroy()
        end
    end
    
    -- Update stats
    if scriptData.statsLabel then
        scriptData.statsLabel.Text = "Found " .. #foundTools .. " tools, " .. #foundItems .. " items"
    end
    
    -- Create tool entries
    for i, toolInfo in pairs(foundTools) do
        local toolFrame = Instance.new("Frame")
        toolFrame.Name = "Tool_" .. i
        toolFrame.Size = UDim2.new(1, -10, 0, 60)
        toolFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
        toolFrame.BorderSizePixel = 0
        toolFrame.Parent = scriptData.scrollFrame
        
        local toolCorner = Instance.new("UICorner")
        toolCorner.CornerRadius = UDim.new(0, 4)
        toolCorner.Parent = toolFrame
        
        -- Tool name and info
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, -80, 0, 20)
        nameLabel.Position = UDim2.new(0, 5, 0, 5)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = "üîß " .. toolInfo.name
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.TextScaled = true
        nameLabel.Font = Enum.Font.GothamBold
        nameLabel.TextXAlignment = Enum.TextXAlignment.Left
        nameLabel.Parent = toolFrame
        
        -- Location info
        local locationLabel = Instance.new("TextLabel")
        locationLabel.Size = UDim2.new(1, -80, 0, 15)
        locationLabel.Position = UDim2.new(0, 5, 0, 25)
        locationLabel.BackgroundTransparency = 1
        locationLabel.Text = "üìç " .. toolInfo.location
        locationLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
        locationLabel.TextScaled = true
        locationLabel.Font = Enum.Font.Gotham
        locationLabel.TextXAlignment = Enum.TextXAlignment.Left
        locationLabel.Parent = toolFrame
        
        -- Vulnerabilities
        local vulnLabel = Instance.new("TextLabel")
        vulnLabel.Size = UDim2.new(1, -80, 0, 15)
        vulnLabel.Position = UDim2.new(0, 5, 0, 40)
        vulnLabel.BackgroundTransparency = 1
        vulnLabel.Text = "üîì " .. (#toolInfo.vulnerabilities > 0 and table.concat(toolInfo.vulnerabilities, ", ") or "No vulnerabilities")
        vulnLabel.TextColor3 = #toolInfo.vulnerabilities > 0 and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(100, 100, 100)
        vulnLabel.TextScaled = true
        vulnLabel.Font = Enum.Font.Gotham
        vulnLabel.TextXAlignment = Enum.TextXAlignment.Left
        vulnLabel.Parent = toolFrame
        
        -- Grab button
        local grabButton = Instance.new("TextButton")
        grabButton.Size = UDim2.new(0, 70, 1, -10)
        grabButton.Position = UDim2.new(1, -75, 0, 5)
        grabButton.BackgroundColor3 = Color3.fromRGB(255, 140, 0)
        grabButton.Text = "‚ö° GRAB"
        grabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        grabButton.TextScaled = true
        grabButton.Font = Enum.Font.GothamBold
        grabButton.BorderSizePixel = 0
        grabButton.Parent = toolFrame
        
        local grabCorner = Instance.new("UICorner")
        grabCorner.CornerRadius = UDim.new(0, 4)
        grabCorner.Parent = grabButton
        
        -- Grab button click
        grabButton.MouseButton1Click:Connect(function()
            exploitTool(toolInfo)
        end)
    end
    
    -- Update canvas size
    scriptData.scrollFrame.CanvasSize = UDim2.new(0, 0, 0, #foundTools * 62)
end

-- Create GUI
local function createExploiterGUI()
    -- Remove existing GUI
    local existingGUI = game:GetService("CoreGui"):FindFirstChild("ToolExploiterGUI")
    if existingGUI then
        existingGUI:Destroy()
    end
    
    -- Main ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ToolExploiterGUI"
    screenGui.Parent = game:GetService("CoreGui")
    screenGui.ResetOnSpawn = false
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 500, 0, 600)
    mainFrame.Position = UDim2.new(0.5, -250, 0.5, -300)
    mainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
    mainFrame.BorderSizePixel = 0
    mainFrame.Visible = false
    mainFrame.Parent = screenGui
    
    -- Styling
    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0, 12)
    frameCorner.Parent = mainFrame
    
    local frameStroke = Instance.new("UIStroke")
    frameStroke.Color = Color3.fromRGB(255, 140, 0)
    frameStroke.Thickness = 2
    frameStroke.Parent = mainFrame
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "üîß Universal Tool Exploiter"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = mainFrame
    
    -- Stats Label
    local statsLabel = Instance.new("TextLabel")
    statsLabel.Name = "StatsLabel"
    statsLabel.Size = UDim2.new(1, -20, 0, 25)
    statsLabel.Position = UDim2.new(0, 10, 0, 45)
    statsLabel.BackgroundTransparency = 1
    statsLabel.Text = "Ready to scan..."
    statsLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
    statsLabel.TextScaled = true
    statsLabel.Font = Enum.Font.Gotham
    statsLabel.Parent = mainFrame
    
    -- Control Frame
    local controlFrame = Instance.new("Frame")
    controlFrame.Name = "ControlFrame"
    controlFrame.Size = UDim2.new(1, -20, 0, 40)
    controlFrame.Position = UDim2.new(0, 10, 0, 80)
    controlFrame.BackgroundTransparency = 1
    controlFrame.Parent = mainFrame
    
    -- Scan Button
    local scanButton = Instance.new("TextButton")
    scanButton.Name = "ScanButton"
    scanButton.Size = UDim2.new(0, 100, 1, 0)
    scanButton.Position = UDim2.new(0, 0, 0, 0)
    scanButton.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
    scanButton.Text = "üîç Scan"
    scanButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    scanButton.TextScaled = true
    scanButton.Font = Enum.Font.GothamBold
    scanButton.BorderSizePixel = 0
    scanButton.Parent = controlFrame
    
    local scanCorner = Instance.new("UICorner")
    scanCorner.CornerRadius = UDim.new(0, 6)
    scanCorner.Parent = scanButton
    
    -- Grab All Button
    local grabAllButton = Instance.new("TextButton")
    grabAllButton.Name = "GrabAllButton"
    grabAllButton.Size = UDim2.new(0, 120, 1, 0)
    grabAllButton.Position = UDim2.new(0, 110, 0, 0)
    grabAllButton.BackgroundColor3 = Color3.fromRGB(255, 100, 0)
    grabAllButton.Text = "‚ö° Grab All"
    grabAllButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    grabAllButton.TextScaled = true
    grabAllButton.Font = Enum.Font.GothamBold
    grabAllButton.BorderSizePixel = 0
    grabAllButton.Parent = controlFrame
    
    local grabAllCorner = Instance.new("UICorner")
    grabAllCorner.CornerRadius = UDim.new(0, 6)
    grabAllCorner.Parent = grabAllButton
    
    -- Auto Scan Toggle
    local autoScanButton = Instance.new("TextButton")
    autoScanButton.Name = "AutoScanButton"
    autoScanButton.Size = UDim2.new(0, 100, 1, 0)
    autoScanButton.Position = UDim2.new(0, 240, 0, 0)
    autoScanButton.BackgroundColor3 = autoScanEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(80, 80, 80)
    autoScanButton.Text = autoScanEnabled and "Auto: ON" or "Auto: OFF"
    autoScanButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    autoScanButton.TextScaled = true
    autoScanButton.Font = Enum.Font.Gotham
    autoScanButton.BorderSizePixel = 0
    autoScanButton.Parent = controlFrame
    
    local autoScanCorner = Instance.new("UICorner")
    autoScanCorner.CornerRadius = UDim.new(0, 6)
    autoScanCorner.Parent = autoScanButton
    
    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
    closeButton.Text = "√ó"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.GothamBold
    closeButton.BorderSizePixel = 0
    closeButton.Parent = mainFrame
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 15)
    closeCorner.Parent = closeButton
    
    -- Scroll Frame for tools
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "ToolScroll"
    scrollFrame.Size = UDim2.new(1, -20, 1, -140)
    scrollFrame.Position = UDim2.new(0, 10, 0, 130)
    scrollFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 8
    scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(255, 140, 0)
    scrollFrame.Parent = mainFrame
    
    local scrollCorner = Instance.new("UICorner")
    scrollCorner.CornerRadius = UDim.new(0, 8)
    scrollCorner.Parent = scrollFrame
    
    -- List Layout
    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.Name
    listLayout.Padding = UDim.new(0, 2)
    listLayout.Parent = scrollFrame
    
    -- Store GUI references
    scriptData.gui = screenGui
    scriptData.mainFrame = mainFrame
    scriptData.statsLabel = statsLabel
    scriptData.scrollFrame = scrollFrame
    scriptData.autoScanButton = autoScanButton
    
    -- Button connections
    scanButton.MouseButton1Click:Connect(function()
        scanForTools()
        updateToolList()
    end)
    
    grabAllButton.MouseButton1Click:Connect(function()
        grabAllTools()
    end)
    
    autoScanButton.MouseButton1Click:Connect(function()
        autoScanEnabled = not autoScanEnabled
        autoScanButton.BackgroundColor3 = autoScanEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(80, 80, 80)
        autoScanButton.Text = autoScanEnabled and "Auto: ON" or "Auto: OFF"
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        toggleGUI()
    end)
    
    -- Make GUI draggable
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    titleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    titleLabel.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    titleLabel.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

-- Grab all tools
function grabAllTools()
    print("‚ö° Starting mass tool exploitation...")
    local successCount = 0
    
    for i, toolInfo in pairs(foundTools) do
        local success = exploitTool(toolInfo)
        if success then
            successCount = successCount + 1
        end
        wait(0.2) -- Delay between tools
    end
    
    print("‚úÖ Mass exploitation complete: " .. successCount .. "/" .. #foundTools .. " tools obtained")
end

-- Toggle GUI
function toggleGUI()
    if not scriptData.mainFrame then return end
    
    guiVisible = not guiVisible
    scriptData.mainFrame.Visible = guiVisible
    
    if guiVisible then
        -- Auto scan on open if enabled
        if autoScanEnabled then
            scanForTools()
            updateToolList()
        end
    end
end

-- Quick grab nearest tool
local function quickGrab()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = LocalPlayer.Character.HumanoidRootPart
        local nearestTool = nil
        local nearestDistance = math.huge
        
        -- Find nearest tool in workspace
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Tool") and obj:FindFirstChild("Handle") then
                local distance = (obj.Handle.Position - rootPart.Position).Magnitude
                if distance < nearestDistance and distance < 50 then -- Within 50 studs
                    nearestDistance = distance
                    nearestTool = obj
                end
            end
        end
        
        if nearestTool then
            local toolInfo = {
                object = nearestTool,
                name = nearestTool.Name,
                location = "Workspace",
                vulnerabilities = {"World Pickup", "Clonable"}
            }
            print("üéØ Quick grabbing: " .. nearestTool.Name)
            exploitTool(toolInfo)
        else
            print("‚ùå No tools found nearby")
        end
    end
end

-- Input handling
local function onInputBegan(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == _G.ScanKey then
        toggleGUI()
    elseif input.KeyCode == _G.QuickGrabKey then
        quickGrab()
    end
end

-- Initialize
local function initialize()
    initializeExploitMethods()
    createExploiterGUI()
    
    -- Input connection
    local inputConnection = UserInputService.InputBegan:Connect(onInputBegan)
    table.insert(connections, inputConnection)
    
    -- Auto scan timer
    if autoScanEnabled then
        local autoScanConnection = RunService.Heartbeat:Connect(function()
            if tick() % 30 < 0.1 then -- Auto scan every 30 seconds
                if autoScanEnabled and not guiVisible then
                    scanForTools()
                end
            end
        end)
        table.insert(connections, autoScanConnection)
    end
end

-- Cleanup
local function cleanup()
    print("üßπ Cleaning up Tool Exploiter...")
    
    for _, connection in pairs(connections) do
        if connection then
            connection:Disconnect()
        end
    end
    connections = {}
    
    if scriptData.gui then
        scriptData.gui:Destroy()
        scriptData.gui = nil
    end
    
    foundTools = {}
    foundItems = {}
    scanResults = {}
    selectedTool = nil
    guiVisible = false
    
    print("‚úÖ Tool Exploiter cleanup complete!")
end

-- Store globally
_G.ToolExploiterScript = {
    Cleanup = cleanup,
    ScanForTools = scanForTools,
    ExploitTool = exploitTool,
    ToggleGUI = toggleGUI,
    QuickGrab = quickGrab
}

-- Initialize
initialize()

print("‚úÖ Universal Tool Exploiter loaded!")
print("üîß Press T to open tool scanner")
print("‚ö° Press G for quick grab nearest tool")
print("üéØ Scans for vulnerabilities and exploits tools automatically")